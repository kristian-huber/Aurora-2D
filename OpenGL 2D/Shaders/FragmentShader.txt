#version 330 core

in vec2 texCoords;
in vec2 toLightVector[16];
in vec2 fromCenterPoint;

out vec4 out_Color;

uniform sampler2D image;
uniform vec3 spriteColor;
uniform float ambientLight;
uniform vec4 lightCol[16];
uniform float radius[16];
uniform int renderBox;
uniform float boundingRadius;

void main(){

	if(renderBox == 1){
		out_Color = vec4(spriteColor, 1.0);
	}else if (renderBox == 2){
		float weight = (boundingRadius - length(fromCenterPoint))/boundingRadius;

		if(weight <= 0.02 && weight >= -0.02){
			out_Color = vec4(spriteColor, 1);
		}else{
			out_Color = vec4(0, 0, 0, 0);
		}
	}else{
		//Make the ambient lighting
		out_Color = texture(image, texCoords);
		out_Color.rgb *= ambientLight;
		float saveAlpha = out_Color.a;

		//Clear shadows if its dark enough
		if(ambientLight / 1.5 < saveAlpha && saveAlpha < 1){
			saveAlpha = 0;	
		}

		//Loop through all of the lights
		for(int i = 0; i < 16; i++){

			if(lightCol[i].a > 0){
				float weight = (radius[i] - length(toLightVector[i]))/radius[i];
				weight = max(weight, 0);

				//This get rid of shadows based on light levels
				if(saveAlpha < 1){
					saveAlpha -= weight;
				}

				out_Color += weight * lightCol[i];
			}
		}

		//Restore back the alpha so it isn't a ghost
		out_Color.a = saveAlpha;
	}
}